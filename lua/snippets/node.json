{
	"jest-suite": {
		"prefix": "node-jest-suite",
		"body": [
			"describe('$1', () => {",
			"  ",
			"})"
		]
	},
	"jest-test": {
		"prefix": "node-jest-test",
		"body": [
			"test('$1', () => {$2})"
		]
	},
	"jest-test-expect": {
		"prefix": "node-jest-test-expect",
		"body": [
			"test('$2', () => {",
			"  expect(1).toBe(2)",
			"})"
		]
	},
	"jest-expect": {
		"prefix": "node-jest-expect",
		"body": [
			" expect(1).toBe(2)"
		]
	},
	"jest-expect-to-equal": {
		"prefix": "node-jest-expect-to-equal",
		"body": [
			"let obj = { a: '1' }",
			"expect(obj).toEqual({ a: '1' })"
		]
	},
	"jest-test-expect-to-equal": {
		"prefix": "node-jest-test-expect-to-equal",
		"body": [
			"test('$2', () => {",
			"  let obj = { a: '1' }",
			"  expect(obj).toEqual({ a: '1' })",
			"})"
		]
	},
	"jest-expect-to-throw": {
		"prefix": "node-jest-expect-to-throw",
		"body": [
			"const thisThrows = () => throw new Error('error message')",
			"expect(thisThrows).toThrow('error message')"
		]
	},
	"jest-test-expect-to-throw": {
		"prefix": "node-jest-test-expect-to-throw",
		"body": [
			"test('$2', () => {",
			"  const thisThrows = () => throw new Error('error message')",
			"  expect(thisThrows).toThrow('error message')",
			"})"
		]
	},
	"jest-test-beforeAll": {
		"prefix": "node-jest-test-beforeAll",
		"body": [
			"  beforeAll(() => {",
			"    ",
			"  })"
		]
	},
	"jest-test-afterAll": {
		"prefix": "node-jest-test-afterAll",
		"body": [
			"  afterAll(() => {",
			"    ",
			"  })"
		]
	},
	"regex-test-digits": {
		"prefix": "node-regex-test-digits",
		"body": [
			"const isMatch = /\\d+/.test('abc123')"
		],
		"description": "test if string contains digits, returns true/false"
	},
	"regex-test-word": {
		"prefix": "node-regex-test-word",
		"body": [
			"const isMatch = /\\w+/.test('abc123')"
		],
		"description": "test if string contains a word boundary, returns true/false"
	},
	"regex-test-match": {
		"prefix": "node-regex-match",
		"body": [
			"const [, extension] = 'file.txt'.match(/\\.(\\w+)/)"
		],
		"description": "matches a file extension"
	},
	"regex-test-match-named-group": {
		"prefix": "node-regex-match-named-group",
		"body": [
			"const { groups: { extension } } = 'file.txt'.match(/\\.(?<extension>\\w+)/)"
		],
		"description": "matches a file extension, "
	}
}
